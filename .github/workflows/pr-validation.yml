name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  pr-validation:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check commit messages
      run: |
        echo "Checking commit message format..."
        COMMITS=$(git log --pretty=format:"%s" ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
        echo "Commits in this PR:"
        echo "$COMMITS"
        
        # Check if commits follow conventional commit format or are merge commits
        echo "$COMMITS" | while IFS= read -r commit; do
          if [[ "$commit" =~ ^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+ ]] || [[ "$commit" =~ ^Merge ]]; then
            echo "✓ Valid commit: $commit"
          else
            echo "⚠️  Commit doesn't follow conventional format: $commit"
            echo "Please use format: type(scope): description"
            echo "Types: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert"
          fi
        done
        
    - name: Check for breaking changes
      run: |
        echo "Checking for potential breaking changes..."
        
        # Check if package.json version indicates breaking change
        VERSION=$(node -p "require('./package.json').version")
        if [[ "$VERSION" =~ ^[0-9]+\.0\.0 ]]; then
          echo "⚠️  Major version bump detected - please ensure breaking changes are documented"
        fi
        
        # Check for removed or modified exports
        if git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -q "index.ts\|package.json"; then
          echo "⚠️  Core files modified - please review for breaking changes"
        fi
        
    - name: Validate examples
      run: |
        echo "Validating example workflows..."
        for file in examples/*.json; do
          echo "Validating $file"
          if ! jq empty "$file" 2>/dev/null; then
            echo "❌ ERROR: $file is not valid JSON"
            exit 1
          fi
          
          # Check if examples use correct expression format
          if grep -q "{{[^}]" "$file"; then
            echo "⚠️  WARNING: $file may use old expression format {{}} instead of ={{}}"
            echo "Please update to use n8n expression format: ={{expression}}"
          fi
          
          echo "✓ $file is valid"
        done
        
    - name: Check test coverage
      run: |
        echo "Running tests with coverage..."
        npm run test:coverage
        
        # Check if coverage meets minimum threshold
        COVERAGE=$(cat coverage/lcov.info | grep -c "^LF:" || echo "0")
        COVERED=$(cat coverage/lcov.info | grep -c "^LH:" || echo "0")
        
        if [ "$COVERAGE" -gt 0 ]; then
          PERCENTAGE=$(( COVERED * 100 / COVERAGE ))
          echo "Test coverage: $PERCENTAGE%"
          
          if [ "$PERCENTAGE" -lt 80 ]; then
            echo "⚠️  WARNING: Test coverage is below 80% ($PERCENTAGE%)"
            echo "Please add tests to improve coverage"
          else
            echo "✓ Test coverage meets requirements ($PERCENTAGE%)"
          fi
        fi
        
    - name: Check build
      run: |
        echo "Verifying build works correctly..."
        npm run build
        
        # Verify all required files are built
        echo "Checking build artifacts..."
        test -f dist/index.js || (echo "❌ ERROR: dist/index.js not found" && exit 1)
        test -d dist/nodes || (echo "❌ ERROR: dist/nodes directory not found" && exit 1)
        test -d dist/credentials || (echo "❌ ERROR: dist/credentials directory not found" && exit 1)
        test -d dist/icons || (echo "❌ ERROR: dist/icons directory not found" && exit 1)
        
        echo "✓ Build completed successfully"
        
    - name: Check documentation
      run: |
        echo "Checking documentation updates..."
        
        # Check if new nodes were added
        if git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -q "nodes/.*\.node\.ts"; then
          echo "⚠️  Node files modified - please ensure README.md is updated if needed"
          
          # Check if README was also updated
          if git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -q "README.md"; then
            echo "✓ README.md updated along with node changes"
          else
            echo "⚠️  Consider updating README.md to document node changes"
          fi
        fi
        
    - name: Performance check
      run: |
        echo "Running basic performance checks..."
        
        # Check bundle size
        BUNDLE_SIZE=$(stat -c%s "dist/index.js" 2>/dev/null || stat -f%z "dist/index.js")
        BUNDLE_SIZE_MB=$((BUNDLE_SIZE / 1024 / 1024))
        
        echo "Bundle size: ${BUNDLE_SIZE_MB}MB"
        
        if [ "$BUNDLE_SIZE_MB" -gt 10 ]; then
          echo "⚠️  WARNING: Bundle size is quite large (${BUNDLE_SIZE_MB}MB)"
          echo "Consider optimizing dependencies or splitting the bundle"
        else
          echo "✓ Bundle size is reasonable (${BUNDLE_SIZE_MB}MB)"
        fi
        
    - name: PR Summary Comment
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const { execSync } = require('child_process');
          
          // Get test results
          let testResults = '✅ Tests passed';
          try {
            execSync('npm test', { stdio: 'pipe' });
          } catch (error) {
            testResults = '❌ Tests failed';
          }
          
          // Get lint results
          let lintResults = '✅ Linting passed';
          try {
            execSync('npm run lint', { stdio: 'pipe' });
          } catch (error) {
            lintResults = '❌ Linting failed';
          }
          
          const comment = `## 🤖 PR Validation Summary
          
          | Check | Status |
          |-------|--------|
          | Tests | ${testResults} |
          | Linting | ${lintResults} |
          | Build | ✅ Build successful |
          | Examples | ✅ Examples validated |
          
          ### 📋 Checklist for reviewers:
          - [ ] Code follows project conventions
          - [ ] Tests cover new functionality
          - [ ] Documentation updated if needed
          - [ ] Breaking changes documented
          - [ ] Examples updated if applicable
          
          ---
          Generated by GitHub Actions 🚀`;
          
          // Find existing comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const existingComment = comments.data.find(c => 
            c.user.login === 'github-actions[bot]' && 
            c.body.includes('PR Validation Summary')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }